#
# Copyright (C) 2016-2019 Draios Inc dba Sysdig.
#
# This file is part of falco.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
- required_engine_version: 2

- macro: psp_enabled
  condition: (k8s_audit_always_true)

- list: psp_images
  items: {{ p.image_list }}

- macro: psp_container
  condition: (psp_enabled and kevt and pod and kcreate and ka.req.container.image.repository in (psp_images))
{% if not p.allow_privileged  %}

- rule: PSP Validation Failure Privileged
  desc: >
    Detect a psp validation failure for a privileged pod
  condition: psp_container and ka.req.container.privileged=true
  output: Pod Security Policy {{ p.policy_name }} validation failure--pod with privileged=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}
{% if not p.allow_host_pid %}

- rule: PSP Validation Failure HostPid
  desc: >
    Detect a psp validation failure for a hostPID pod
  condition: psp_container and ka.req.container.host_pid=true
  output: Pod Security Policy {{ p.policy_name }} validation failure--pod with hostpid=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}
{% if not p.allow_host_ipc %}

- rule: PSP Validation Failure HostIPC
  desc: >
    Detect a psp validation failure for a hostIPC pod
  condition: psp_container and ka.req.container.host_ipc=true
  output: Pod Security Policy {{ p.policy_name }} validation failure--pod with hostipc=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}
{% if not p.allow_host_network %}

- rule: PSP Validation Failure HostNetwork
  desc: >
    Detect a psp validation failure for a hostnetwork pod
  condition: psp_container and ka.req.container.host_network=true
  output: Pod Security Policy {{ p.policy_name }} validation failure--pod with hostnetwork=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% elif p.host_network_ports != "" %}

- rule: PSP Validation Failure HostNetwork Ports
  desc: >
    Detect a psp validation failure for a hostnetwork port outside of the allowed set
  condition: psp_container and not ka.req.container.host_port.within[{{ p.host_network_ports }}]=true
  output: Pod Security Policy {{ p.policy_name }} validation failure--hostnetwork port outside of allowed set {{ p.host_network_ports }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}
{% if p.allowed_volume_types|length > 0 %}

- rule: PSP Validation Failure Volume Types
  desc: >
    Detect a psp validation failure for a volume type outside of the allowed set
  condition: psp_container and not ka.req.volume_types.within[{{ p.allowed_volume_types|join(',') }}]=true
  output: Pod Security Policy {{ p.policy_name }} validation failure--volume type outside of allowed set {{ p.allowed_volume_types }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}

{% if p.allowed_host_paths|length > 0 %}

- macro: psp_allowed_host_paths
  condition: (ka.req.volume.all_hostpath[{{ p.allowed_host_paths|join(',') }},{{ p.allowed_host_paths|join('*,') }}*] = true)

- rule: PSP Validation Failure Host Paths
  desc: >
    Detect a psp validation failure for a hostPath volume with a path outside of the allowed set
  condition: psp_container and ka.req.volume_types.within[hostPath]=true and not psp_allowed_host_paths
  output: Pod Security Policy {{ p.policy_name }} validation failure--hostPath volume mounting path outside of allowed set {{ p.allowed_host_paths }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}

{% if p.allowed_flexvolume_drivers|length > 0 %}

- macro: psp_allowed_flexvolume_drivers
  condition: (ka.req.volume.all_flexvolume_drivers[{{ p.allowed_flexvolume_drivers|join(',') }}] = true)

- rule: PSP Validation Failure Flexvolume Drivers
  desc: >
    Detect a psp validation failure for a FlexVolume driver outside of the allowed set
  condition: psp_container and not psp_allowed_flexvolume_drivers
  output: Pod Security Policy {{ p.policy_name }} validation failure--Flexvolume driver outside of allowed set {{ p.allowed_flexvolume_drivers }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}


