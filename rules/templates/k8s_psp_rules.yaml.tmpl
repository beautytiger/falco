#
# Copyright (C) 2016-2019 Draios Inc dba Sysdig.
#
# This file is part of falco.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
- required_engine_version: 4

- macro: psp_always_true
  condition: (jevt.rawtime exists)

- macro: psp_never_true
  condition: (jevt.rawtime=0)

- macro: psp_enabled
  condition: (psp_always_true)

- list: psp_images
  items: {{ image_list }}

- macro: psp_kevt
  condition: (jevt.value[/stage] in ("ResponseComplete"))

- macro: psp_pod
  condition: (ka.target.resource=pods and not ka.target.subresource exists)

- macro: psp_container
  condition: (psp_enabled and psp_kevt and psp_pod and ka.verb=create and ka.req.container.image.repository in (psp_images))
{% if not allow_privileged  %}
#########################################
# Rule for PSP privileged property
#########################################
- rule: PSP Validation Failure Privileged
  desc: >
    Detect a psp validation failure for a privileged pod
  condition: psp_container and ka.req.container.privileged=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod with privileged=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if not allow_host_pid %}
#########################################
# Rule for PSP hostPID property
#########################################
- rule: PSP Validation Failure HostPID
  desc: >
    Detect a psp validation failure for a hostPID pod
  condition: psp_container and ka.req.container.host_pid=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod with hostpid=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if not allow_host_ipc %}
#########################################
# Rule for PSP hostIPC property
#########################################
- rule: PSP Validation Failure HostIPC
  desc: >
    Detect a psp validation failure for a hostIPC pod
  condition: psp_container and ka.req.container.host_ipc=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod with hostipc=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if not allow_host_network %}
#########################################
# Rule for PSP hostNetwork property
#########################################
- rule: PSP Validation Failure HostNetwork
  desc: >
    Detect a psp validation failure for a hostNetwork pod
  condition: psp_container and ka.req.container.host_network=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod with hostnetwork=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(host_network_ports) > 0 %}
#########################################
# Rule for PSP hostPorts ranges
#########################################
- rule: PSP Validation Failure HostNetwork Ports
  desc: >
    Detect a psp validation failure for a hostnetwork port outside of the allowed set
  condition: psp_container and not ka.req.container.host_port.within[{{ rjoin(",", host_network_ports) }}]=true
  output: Pod Security Policy {{ policy_name }} validation failure--hostnetwork port outside of allowed ranges [{{ rjoin(",", host_network_ports) }}] (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(allowed_volume_types) > 0 %}
#########################################
# Rule for PSP volumes property
#########################################
- rule: PSP Validation Failure Volume Types
  desc: >
    Detect a psp validation failure for a volume type outside of the allowed set
  condition: psp_container and not ka.req.volume_types.within[{{ join(",", allowed_volume_types) }}]=true
  output: Pod Security Policy {{ policy_name }} validation failure--volume type outside of allowed set {{ join(",", allowed_volume_types) }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(allowed_host_paths) > 0 %}
#########################################
# Rule for PSP allowedHostPaths property
#########################################
- macro: psp_allowed_host_paths
  condition: (ka.req.volume.all_hostpath[{{ join(",", allowed_host_paths) }}] = true)

- rule: PSP Validation Failure Allowed Host Paths
  desc: >
    Detect a psp validation failure for a hostPath volume with a path outside of the allowed set
  condition: psp_container and ka.req.volume_types.within[hostPath]=true and not psp_allowed_host_paths
  output: Pod Security Policy {{ policy_name }} validation failure--hostPath volume mounting path outside of allowed set {{ join(",", allowed_host_paths) }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(allowed_flexvolume_drivers) > 0 %}
#########################################
# Rule for PSP allowedFlexVolumes property
#########################################
- macro: psp_allowed_flexvolume_drivers
  condition: (ka.req.volume.all_flexvolume_drivers[{{ join(",", allowed_flexvolume_drivers) }}] = true)

- rule: PSP Validation Failure Flexvolume Drivers
  desc: >
    Detect a psp validation failure for a FlexVolume driver outside of the allowed set
  condition: psp_container and not psp_allowed_flexvolume_drivers
  output: Pod Security Policy {{ policy_name }} validation failure--Flexvolume driver outside of allowed set {{ join(",", allowed_flexvolume_drivers) }} (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(must_run_fs_groups) > 0 or length(may_run_fs_groups) > 0 %}
#########################################
# Rule for PSP fsGroup property
#########################################
- macro: psp_fs_group_must_run_matches
{% if length(must_run_fs_groups) > 0 %}  condition: >
    ({% for group in must_run_fs_groups %}
      {% if not loop.is_first %} and {% endif %}(ka.req.sec_ctx.fs_group >= {{ group.min }} and ka.req.sec_ctx.fs_group <= {{ group.max }}){% endfor %}
    )
{% else %}  condition: (psp_always_true)
{% endif %}
- macro: psp_fs_group_may_run_matches
{% if length(may_run_fs_groups) > 0 %}  condition: >
    (ka.req.sec_ctx.fs_group = "<NA>" or
     ({% for group in may_run_fs_groups %}
      {% if not loop.is_first %} and {% endif %}(ka.req.sec_ctx.fs_group >= {{ group.min }} and ka.req.sec_ctx.fs_group <= {{ group.max }}){% endfor %}
     )
    )
{% else %}  condition: (psp_always_true)
{% endif %}
- macro: psp_fs_group
  condition: (psp_fs_group_must_run_matches and psp_fs_group_may_run_matches)

- rule: PSP Validation Failure fsGroup
  desc: >
    Detect a psp validation failure for a fsGroup gid outside of the allowed set
  condition: psp_container and not psp_fs_group
  output: Pod Security Policy {{ policy_name }} validation failure--fsGroup outside of allowed set. mustRun set="{{ must_run_fs_groups }}" mayRun set="{{ may_run_fs_groups }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if read_only_root_filesystem %}
#########################################
# Rule for PSP readOnlyRootFilesystem property
#########################################
- rule: PSP Validation Failure readOnlyRootFilesystem
  desc: >
    Detect a psp validation failure for a readOnlyRootFilesystem pod
  condition: psp_container and ka.req.container.read_write_fs=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod without readOnlyRootFilesystem=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(must_run_as_users) > 0 %}
#########################################
# Rule for PSP runAsUser property: MustRunAs + list of uids
#########################################
- rule: PSP Validation Failure runAsUser
  desc: >
    Detect a psp validation failure for a runAsUser outside of the allowed set
  condition: psp_container and ka.req.container.run_as_user.within[{{ rjoin(",", must_run_as_users) }}]=false
  output: Pod Security Policy {{ policy_name }} validation failure--runAsUser outside of allowed set. runAsUser set="{{ must_run_as_users }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if must_run_as_non_root %}
#########################################
# Rule for PSP runAsUser property: MustRunAsNonRoot
#########################################
- rule: PSP Validation Failure runAsNonRoot
  desc: >
    Detect a psp validation failure for a non-zero runAsUser when MustRunAsNonRoot is set
  condition: psp_container and ka.req.container.run_as_user.any_within[0:0]=true
  output: Pod Security Policy {{ policy_name }} validation failure--uid 0 runAsUser when MustRunAsNonRoot is set (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(must_run_as_groups) > 0 %}
#########################################
# Rule for PSP runAsGroup property: MustRunAs + list of gids
#########################################
- rule: PSP Validation Failure runAsGroup MustRunAs
  desc: >
    Detect a psp validation failure for a runAsGroup outside of the MustRunAs allowed set
  condition: psp_container and ka.req.container.run_as_group.within[{{ rjoin(",", must_run_as_groups) }}]=false
  output: Pod Security Policy {{ policy_name }} validation failure--runAsGroup outside of the MustRunAs allowed set. runAsGroup MustRunAs set="{{ must_run_as_groups }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(may_run_as_groups) > 0 %}
#########################################
# Rule for PSP runAsGroup property: MayRunAs + list of gids
#########################################
- rule: PSP Validation Failure runAsGroup MayRunAs
  desc: >
    Detect a psp validation failure for a runAsGroup outside of the MayRunAs allowed set
  condition: psp_container and (ka.req.container.has_run_as_group=true and ka.req.container.run_as_group.within[{{ rjoin(",", may_run_as_groups) }}]=false)
  output: Pod Security Policy {{ policy_name }} validation failure--runAsGroup outside of the MayRunAs allowed set. runAsGroup MayRunAs set="{{ may_run_as_groups }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(must_run_supplemental_groups) > 0 or length(may_run_supplemental_groups) > 0 %}
#########################################
# Rule for PSP supplementalGroups property: MustRunAs/MayRunAs + list of gids
#########################################
- macro: psp_supplemental_group_must_run_matches
{% if length(must_run_supplemental_groups) > 0 %}  condition: >
    ({% for group in must_run_supplemental_groups %}
     {% if not loop.is_first %} and {% endif %}(ka.req.sec_ctx.supplemental_groups.within[{{ group.min }}:{{ group.max }}]=true){% endfor %}
    )
{% else %}  condition: (psp_always_true)
{% endif %}
- macro: psp_supplemental_group_may_run_matches
{% if length(may_run_supplemental_groups) > 0 %}  condition: >
    (ka.req.sec_ctx.supplemental_groups = "<NA>" or ({% for group in may_run_supplemental_groups %}
     {% if not loop.is_first %} and {% endif %}(ka.req.sec_ctx.supplemental_groups.within[{{ group.min }}:{{ group.max }}]=true){% endfor %})
    )
{% else %}  condition: (psp_always_true)
{% endif %}
- macro: psp_supplemental_group
  condition: (psp_supplemental_group_must_run_matches and psp_supplemental_group_may_run_matches)

- rule: PSP Validation Failure supplementalGroups
  desc: >
    Detect a psp validation failure for a supplementalGroups gid outside of the allowed set
  condition: psp_container and not psp_supplemental_group
  output: Pod Security Policy {{ policy_name }} validation failure--supplementalGroups outside of allowed set. mustRun set="{{ must_run_supplemental_groups }}" mayRun set="{{ may_run_supplemental_groups }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if not allow_privilege_escalation %}
#########################################
# Rule for PSP allowPrivilegeEscalation property
#########################################
- rule: PSP Validation Failure Allow Privilege Escalation
  desc: >
    Detect a psp validation failure for allowPrivilegeEscalation
  condition: psp_container and ka.req.sec_ctx.allow_privilege_escalation=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod with allowPrivilegeEscalation=true (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(allowed_capabilities) > 0 %}
#########################################
# Rule for PSP allowedCapabilities property
#########################################
- rule: PSP Validation Failure Allowed Capabilities
  desc: >
    Detect a psp validation failure for Allowed Capabilities
  condition: psp_container and not ka.req.sec_ctx.allowed_capabilities.within[{{ join(",", allowed_capabilities) }}]=true
  output: Pod Security Policy {{ policy_name }} validation failure--pod with capabilities outside of allowed set "{{ join(",", allowed_capabilities) }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}{% if length(allowed_proc_mount_types) > 0 %}
#########################################
# Rule for PSP allowedProcMountTypes property
#########################################
- rule: PSP Validation Failure Allowed Proc Mount Types
  desc: >
    Detect a psp validation failure for Allowed Proc Mount Types
  condition: psp_container and not ka.req.sec_ctx.proc_mount in ({{ join(",", allowed_proc_mount_types) }})
  output: Pod Security Policy {{ policy_name }} validation failure--pod with proc mount %ka.req.sec_ctx.proc_mount outside of allowed set "{{ join(",", allowed_proc_mount_types) }}" (user=%ka.user.name pod=%ka.resp.name ns=%ka.target.namespace image=%ka.req.container.image spec=%jevt.value[/requestObject/spec])
  priority: WARNING
  source: k8s_audit
  tags: [k8s-psp]
{% endif %}
